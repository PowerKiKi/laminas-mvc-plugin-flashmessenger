{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install via composer: $ composer require laminas/laminas-mvc-plugin-flashmessenger If you are using the laminas-component-installer , you're done! If not, you will need to add the component as a module to your application. Add the entry 'Laminas\\Mvc\\Plugin\\FlashMessenger' to your list of modules in your application configuration (typically one of config/application.config.php or config/modules.config.php ).","title":"Home"},{"location":"#installation","text":"Install via composer: $ composer require laminas/laminas-mvc-plugin-flashmessenger If you are using the laminas-component-installer , you're done! If not, you will need to add the component as a module to your application. Add the entry 'Laminas\\Mvc\\Plugin\\FlashMessenger' to your list of modules in your application configuration (typically one of config/application.config.php or config/modules.config.php ).","title":"Installation"},{"location":"controller-plugin/","text":"FlashMessenger Controller Plugin The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages. Available Methods The plugin exposes a number of methods: setSessionManager(Laminas\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Laminas\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Laminas\\Session\\Container : Returns the Laminas\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container. Example public function processAction() { // ... do some work ... $this-&gt;flashMessenger()-&gt;addMessage('You are now logged in.'); return $this-&gt;redirect()-&gt;toRoute('user-success'); } public function successAction() { $return = ['success' =&gt; true]; $flashMessenger = $this-&gt;flashMessenger(); if ($flashMessenger-&gt;hasMessages()) { $return['messages'] = $flashMessenger-&gt;getMessages(); } return $return; }","title":"Controller Plugin"},{"location":"controller-plugin/#flashmessenger-controller-plugin","text":"The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages.","title":"FlashMessenger Controller Plugin"},{"location":"controller-plugin/#available-methods","text":"The plugin exposes a number of methods: setSessionManager(Laminas\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Laminas\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Laminas\\Session\\Container : Returns the Laminas\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container.","title":"Available Methods"},{"location":"controller-plugin/#example","text":"public function processAction() { // ... do some work ... $this-&gt;flashMessenger()-&gt;addMessage('You are now logged in.'); return $this-&gt;redirect()-&gt;toRoute('user-success'); } public function successAction() { $return = ['success' =&gt; true]; $flashMessenger = $this-&gt;flashMessenger(); if ($flashMessenger-&gt;hasMessages()) { $return['messages'] = $flashMessenger-&gt;getMessages(); } return $return; }","title":"Example"},{"location":"view-helper/","text":"FlashMessenger View Helper The FlashMessenger helper is used to render the messages of the FlashMessenger controller plugin . Basic Usage When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this-&gt;flashMessenger()-&gt;render(FlashMessenger::NAMESPACE_SUCCESS); CSS Layout The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: &lt;ul class=\"alert alert-danger\"&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, the developer, are AWESOME!&lt;/li&gt; &lt;/ul&gt; HTML Layout Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper itself. // Laminas/View/Helper/FlashMessenger.php#L41-L43 protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this-&gt;flashMessenger() -&gt;setMessageOpenFormat('&lt;div%s&gt;&lt;p&gt;') -&gt;setMessageSeparatorString('&lt;/p&gt;&lt;p&gt;') -&gt;setMessageCloseString('&lt;/p&gt;&lt;/div&gt;') -&gt;render('success'); The above code sample then would then generate the following output: &lt;div class=\"success\"&gt; &lt;p&gt;Some FlashMessenger Content&lt;/p&gt; &lt;p&gt;You, who's reading the docs, are AWESOME!&lt;/p&gt; &lt;/div&gt; Sample Modification for Twitter Bootstrap 3 Taking all the above knowledge into account, we can create a nice, highly usable and user-friendly rendering strategy using the Bootstrap front-end framework version 3 layouts: // In any of your .phtml files: $flash = $this-&gt;flashMessenger(); $flash-&gt;setMessageOpenFormat('&lt;div%s&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt; &times; &lt;/button&gt; &lt;ul&gt;&lt;li&gt;') -&gt;setMessageSeparatorString('&lt;/li&gt;&lt;li&gt;') -&gt;setMessageCloseString('&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;'); echo $flash-&gt;render('error', ['alert', 'alert-dismissible', 'alert-danger']); echo $flash-&gt;render('info', ['alert', 'alert-dismissible', 'alert-info']); echo $flash-&gt;render('default', ['alert', 'alert-dismissible', 'alert-warning']); echo $flash-&gt;render('success', ['alert', 'alert-dismissible', 'alert-success']); The output of the above example would create dismissable FlashMessages with the following HTML markup. The example only covers one type of FlashMessenger output; if you would have several FlashMessages available in each of the rendered namespaces , then you would receive the same output multiple times only having different CSS classes applied. &lt;div class=\"alert alert-dismissable alert-success\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt;×&lt;/button&gt; &lt;ul&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, who's reading the docs, are AWESOME!&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; Alternative Configuration of the ViewHelper Layout Laminas\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration, making it possible to set up the FlashMessenger strings through your module.config.php , too. The next example will set up the output to be identical with the above Twitter Bootstrap 3 Example 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'message_open_format' =&gt; '&lt;div%s&gt;&lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt;&times;&lt;/button&gt;&lt;ul&gt;&lt;li&gt;', 'message_close_string' =&gt; '&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/li&gt;&lt;li&gt;', ], ], IDE auto-completion in templates The Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags. Usage In order to allow auto-completion in templates, $this variable should be type-hinted via a DocBlock at the top of your template. It is recommended that you always add the Laminas\\View\\Renderer\\PhpRenderer as the first type, so that the IDE can auto-suggest the default view helpers from laminas-view . Next, chain the HelperTrait from laminas-i18n with a pipe symbol (a.k.a. vertical bar) | : /** * @var Laminas\\View\\Renderer\\PhpRenderer|Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait $this */ You may chain as many HelperTrait traits as you like, depending on view helpers from which Laminas component you are using and would like to provide auto-completion for.","title":"View Helper"},{"location":"view-helper/#flashmessenger-view-helper","text":"The FlashMessenger helper is used to render the messages of the FlashMessenger controller plugin .","title":"FlashMessenger View Helper"},{"location":"view-helper/#basic-usage","text":"When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this-&gt;flashMessenger()-&gt;render(FlashMessenger::NAMESPACE_SUCCESS);","title":"Basic Usage"},{"location":"view-helper/#css-layout","text":"The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: &lt;ul class=\"alert alert-danger\"&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, the developer, are AWESOME!&lt;/li&gt; &lt;/ul&gt;","title":"CSS Layout"},{"location":"view-helper/#html-layout","text":"Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper itself. // Laminas/View/Helper/FlashMessenger.php#L41-L43 protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this-&gt;flashMessenger() -&gt;setMessageOpenFormat('&lt;div%s&gt;&lt;p&gt;') -&gt;setMessageSeparatorString('&lt;/p&gt;&lt;p&gt;') -&gt;setMessageCloseString('&lt;/p&gt;&lt;/div&gt;') -&gt;render('success'); The above code sample then would then generate the following output: &lt;div class=\"success\"&gt; &lt;p&gt;Some FlashMessenger Content&lt;/p&gt; &lt;p&gt;You, who's reading the docs, are AWESOME!&lt;/p&gt; &lt;/div&gt;","title":"HTML Layout"},{"location":"view-helper/#sample-modification-for-twitter-bootstrap-3","text":"Taking all the above knowledge into account, we can create a nice, highly usable and user-friendly rendering strategy using the Bootstrap front-end framework version 3 layouts: // In any of your .phtml files: $flash = $this-&gt;flashMessenger(); $flash-&gt;setMessageOpenFormat('&lt;div%s&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt; &times; &lt;/button&gt; &lt;ul&gt;&lt;li&gt;') -&gt;setMessageSeparatorString('&lt;/li&gt;&lt;li&gt;') -&gt;setMessageCloseString('&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;'); echo $flash-&gt;render('error', ['alert', 'alert-dismissible', 'alert-danger']); echo $flash-&gt;render('info', ['alert', 'alert-dismissible', 'alert-info']); echo $flash-&gt;render('default', ['alert', 'alert-dismissible', 'alert-warning']); echo $flash-&gt;render('success', ['alert', 'alert-dismissible', 'alert-success']); The output of the above example would create dismissable FlashMessages with the following HTML markup. The example only covers one type of FlashMessenger output; if you would have several FlashMessages available in each of the rendered namespaces , then you would receive the same output multiple times only having different CSS classes applied. &lt;div class=\"alert alert-dismissable alert-success\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt;×&lt;/button&gt; &lt;ul&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, who's reading the docs, are AWESOME!&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;","title":"Sample Modification for Twitter Bootstrap 3"},{"location":"view-helper/#alternative-configuration-of-the-viewhelper-layout","text":"Laminas\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration, making it possible to set up the FlashMessenger strings through your module.config.php , too. The next example will set up the output to be identical with the above Twitter Bootstrap 3 Example 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'message_open_format' =&gt; '&lt;div%s&gt;&lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt;&times;&lt;/button&gt;&lt;ul&gt;&lt;li&gt;', 'message_close_string' =&gt; '&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/li&gt;&lt;li&gt;', ], ],","title":"Alternative Configuration of the ViewHelper Layout"},{"location":"view-helper/#ide-auto-completion-in-templates","text":"The Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags.","title":"IDE auto-completion in templates"}]}